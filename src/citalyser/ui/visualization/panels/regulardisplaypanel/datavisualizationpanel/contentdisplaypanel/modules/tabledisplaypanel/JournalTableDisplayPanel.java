/*
 * TableDisplayPanel.java
 *
 * Created on Mar 15, 2013, 1:44:48 AM
 */
package citalyser.ui.visualization.panels.regulardisplaypanel.datavisualizationpanel.contentdisplaypanel.modules.tabledisplaypanel;

import citalyser.model.Journal;
import citalyser.ui.control.DisplayMaster;
import citalyser.util.CommonUtils;
import java.awt.Point;
import java.io.File;
import java.util.ArrayList;
import java.util.Vector;
import javax.swing.JFileChooser;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;
import org.apache.log4j.Logger;

/**
 *
 * @author Tanmay Patil
 */
public class JournalTableDisplayPanel extends javax.swing.JPanel implements TableDisplayPanelInterface {

    private static Logger logger = Logger.getLogger(JournalTableDisplayPanel.class.getName());

    /**
     * Creates new form TableDisplayPanel
     */
    public JournalTableDisplayPanel() {
        initComponents();
    }

    public void setDisplayMaster(DisplayMaster displayMaster) {
        this.displayMaster = displayMaster;
    }

    public DisplayMaster getDisplayMaster() {
        return displayMaster;
    }

    public void setTable(ArrayList<Journal> journalList, TableModel tm) {
        if (jTable1.getModel().getRowCount() == 0) {
            disabledRow = -1;
            jTable1.setModel(tm);
        } else {
            for (int i = 0; i < tm.getRowCount(); i++) {
                Vector row = ((Vector) (((DefaultTableModel) tm).getDataVector().elementAt(i)));
                if (this.journals != null) {
                    row.set(0, new Integer(this.journals.size() + (Integer) row.elementAt(0)));
                }
                ((DefaultTableModel) jTable1.getModel()).addRow(row);
            }
        }

        if (this.journals != null) {
            for (Journal journal : journalList) {
                this.journals.add(journal);
            }
        } else {
            this.journals = journalList;
        }
        jTable1.getColumnModel().getColumn(0).setMaxWidth(35);
        jTable1.getColumnModel().getColumn(1).setPreferredWidth(250);
        jTable1.getColumnModel().getColumn(2).setMaxWidth(65);
        jTable1.getColumnModel().getColumn(3).setMaxWidth(65);
        jTable1.repaint();
       
    }
    private DisplayMaster displayMaster;
    private ArrayList<Journal> journals;
    private int disabledRow;

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        exporttocsvbtn = new javax.swing.JButton();

        setLayout(new java.awt.BorderLayout());

        jTable1.setAutoCreateRowSorter(true);
        jTable1.setFont(new java.awt.Font("Arial", 0, 11)); // NOI18N
        jTable1.setForeground(new java.awt.Color(51, 51, 51));
        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "S.No.", "Title", "Year", "#Citations", "Authors", "Journals"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.Integer.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable1.setGridColor(new java.awt.Color(204, 204, 255));
        jTable1.setIntercellSpacing(new java.awt.Dimension(4, 5));
        jTable1.setRowHeight(25);
        jTable1.setSelectionBackground(new java.awt.Color(50, 93, 167));
        jTable1.setShowVerticalLines(false);
        jTable1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable1MouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jTable1);

        add(jScrollPane1, java.awt.BorderLayout.CENTER);

        exporttocsvbtn.setText("Export To CSV");
        exporttocsvbtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exporttocsvbtnActionPerformed(evt);
            }
        });
        add(exporttocsvbtn, java.awt.BorderLayout.PAGE_END);
    }// </editor-fold>//GEN-END:initComponents

    private void exporttocsvbtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exporttocsvbtnActionPerformed

        JFileChooser chooser = new JFileChooser();
        chooser.removeChoosableFileFilter(chooser.getFileFilter());
        FileNameExtensionFilter filter = new FileNameExtensionFilter("csv files (*.csv)", "csv");
        chooser.setFileFilter(filter);
        chooser.showSaveDialog(this);
        //System.out.println("chooser:"+chooser.getSelectedFile().getName());
        try {
            File results = chooser.getSelectedFile();
            if (!results.getAbsolutePath().endsWith(".csv")) {
                results = new File(chooser.getSelectedFile() + ".csv");
            }
            CommonUtils.exportToCsv(jTable1.getModel(), results);
        } catch (Exception e) {
            logger.info("Error in CSV file chooser PaperTableFromMetricDisplayPanel : " + e);
        }

    }//GEN-LAST:event_exporttocsvbtnActionPerformed

    private void jTable1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable1MouseClicked
        if (jTable1.rowAtPoint(evt.getPoint()) > -1) {
            if (evt.getButton() == java.awt.event.MouseEvent.BUTTON1) {
                if (disabledRow != jTable1.rowAtPoint(evt.getPoint())) {
                    disabledRow = jTable1.rowAtPoint(evt.getPoint());
                    displayMaster.getNavigationMaster().tableClicked(journals.get(jTable1.rowAtPoint(evt.getPoint())));
                }
            }
        }
    }//GEN-LAST:event_jTable1MouseClicked
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton exporttocsvbtn;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    // End of variables declaration//GEN-END:variables

    public void clear() {
        journals = null;
        while (jTable1.getModel().getRowCount() > 0) {
            ((DefaultTableModel) jTable1.getModel()).removeRow(0);
        }
    }

    @Override
    public void callLeftClickedEvent(Point point) {
        if (jTable1.rowAtPoint(point) > -1 && disabledRow != jTable1.rowAtPoint(point)) {
            disabledRow = jTable1.rowAtPoint(point);
            displayMaster.getNavigationMaster().tableClicked(journals.get(jTable1.rowAtPoint(point)));
        }
    }

    @Override
    public boolean isMetric() {
        return true;
    }
}
